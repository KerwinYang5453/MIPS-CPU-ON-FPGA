// Code your design here
`define opcode instr[31:26]
`define sr1 instr[25:21]
`define sr2 instr[20:16]
`define f_code instr[5:0]
`define numshift instr[10:6]
module MIPS (CLK, RST, CS, WE, ADDR, Mem_Bus);
input CLK, RST;
output reg CS, WE;
output [31:0] ADDR;
reg [1:0]temp1,temp2,temp3,temp4,temp5,temp6,temp7;
inout [31:0] Mem_Bus;
//special instructions (opcode == 000000), values of F code (bits 5-0):
parameter add = 6'b100000;
parameter sub = 6'b100010;
parameter xor1 = 6'b100110;
parameter and1 = 6'b100100;
parameter or1 = 6'b100101;
parameter slt = 6'b101010;
parameter srl = 6'b000010;
parameter sll = 6'b000000;
parameter jr = 6'b001000;
parameter brv= 6'b011010;  // add new order
//non-special instructions, values of opcodes:
parameter addi = 6'b001000;
parameter andi = 6'b001100;
parameter ori = 6'b001101;
parameter lw = 6'b100011;
parameter sw = 6'b101011;
parameter beq = 6'b000100;
parameter bne = 6'b000101;
//parameter j = 6'b000010;
//instruction format
parameter R = 2'd0;
parameter I = 2'd1;
parameter J = 2'd2;
//internal signals
reg [5:0] op, opsave;
wire [1:0] format;
reg [31:0] instr, pc, npc, alu_result;
wire [31:0] imm_ext, alu_in_A, alu_in_B, reg_in, readreg1, readreg2;
reg [31:0] alu_result_save;
reg alu_or_mem, alu_or_mem_save, regw, writing, reg_or_imm,
	reg_or_imm_save;
reg fetchDorI;
wire [4:0] dr;
reg [2:0] state, nstate;
//combinational
assign imm_ext = (instr[15] == 1)? {16'hFFFF, instr[15:0]} : {16'h0000,
 instr[15:0]};//Sign extend immediate field
assign dr = (format == R)? instr[15:11] : instr[20:16];
//Destination Register MUX (MUX1)
assign alu_in_A = readreg1;
assign alu_in_B = (reg_or_imm_save)? imm_ext : readreg2;
//ALU MUX (MUX2)
assign reg_in = (alu_or_mem_save)? Mem_Bus : alu_result_save;
//Data MUX
assign format = (`opcode == 6'd0)? R : ((`opcode == 6'd2)? J : I);
assign Mem_Bus = (writing)? readreg2 : 32'bZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ;
//drive memory bus only during writes
assign ADDR = (fetchDorI)? pc : alu_result_save;
//ADDR Mux

Register REG(CLK, regw, dr, `sr1, `sr2, reg_in, readreg1, readreg2);

always @(*)
begin
	fetchDorI = 0; CS = 0; WE = 0; regw = 0; writing = 0; alu_result = 32'd0;
	npc = pc; op = jr; reg_or_imm = 0; alu_or_mem = 0;

case (state)
	0:
	begin //fetch
		npc = pc + 32'd1; CS = 1; nstate = 3'd1;
		fetchDorI = 1;
	end
 
	1:
	begin //decode
		nstate = 3'd2; reg_or_imm = 0; alu_or_mem = 0;
		if (format == J)
		begin //jump, and finish
			npc = {pc[31:26], instr[25:0]};
			nstate = 3'd0;
		end
		else if (format == R) //register instructions
		op = `f_code;
		else if (format == I)
		begin //immediate instructions
			reg_or_imm = 1;
			if(`opcode == lw)
			begin
				op = add;
				alu_or_mem = 1;
			end
			else if ((`opcode == lw)||(`opcode == sw)||(`opcode == addi))
				op = add;
			else if ((`opcode == beq)||(`opcode == bne))
			begin
				op = sub;
				reg_or_imm = 0;
			end
			else if (`opcode == andi) op = and1;
			else if (`opcode == ori) op = or1;
		end
	end
//add a new order
	2:
	begin //execute
		nstate = 3'd3;
		if (opsave == and1) alu_result = alu_in_A & alu_in_B;
		else if (opsave == or1) alu_result = alu_in_A | alu_in_B;
		else if (opsave == add) alu_result = alu_in_A + alu_in_B;
		else if (opsave == sub) alu_result = alu_in_A - alu_in_B;
		else if (opsave == srl) alu_result = alu_in_B >> `numshift;
		else if (opsave == sll) alu_result = alu_in_B << `numshift;
		else if (opsave == slt) alu_result = (alu_in_A < alu_in_B)? 32'd1 :32'd0;
		else if (opsave == xor1) alu_result = alu_in_A ^ alu_in_B;
		else if(opsave == brv)
		begin
		alu_result[31:24]=alu_in_A[7:0];
		alu_result[23:16]=alu_in_A[15:8];
		alu_result[15:8]=alu_in_A[23:16];
		alu_result[7:0]=alu_in_A[31:24];
		end
	
//add a new order
		if (((alu_in_A == alu_in_B)&&(`opcode == beq)) || ((alu_in_A != alu_in_B)&&(`opcode == bne))) 
		begin
			npc = pc + imm_ext;
			nstate = 3'd0;
		end
		else if ((`opcode == bne)||(`opcode == beq)) nstate = 3'd0;
		else if (opsave == jr)
		begin
			npc = alu_in_A;
			nstate = 3'd0;
		end
	end

	3:
	begin //prepare to write to mem
		nstate = 3'd0;
		if ((format == R)||(`opcode == addi)||(`opcode == andi)||(`opcode == ori))
			regw = 1;
		else if (`opcode == sw)
		begin
			CS = 1;
			WE = 1;
			writing = 1;
		end
		else if (`opcode == lw)
		begin
			CS = 1;
			nstate = 3'd4;
		end
	end

	4:
	begin
		nstate = 3'd0;
		CS = 1;
		if (`opcode == lw) regw = 1;
	end
	endcase
end //always

 always @(posedge CLK) begin
 if (RST) begin
 state <= 3'd0;
 pc <= 32'd0;
 end
 else begin
 state <= nstate;
 pc <= npc;
 end
 if (state == 3'd0) instr <= Mem_Bus;
 else if (state == 3'd1) begin
 opsave <= op;
 reg_or_imm_save <= reg_or_imm;
 alu_or_mem_save <= alu_or_mem;
 end
 else if (state == 3'd2) alu_result_save <= alu_result;
 end //always
endmodule

module Register(CLK, RegW, DR, SR1, SR2, Reg_In, ReadReg1, ReadReg2);
 input CLK, RegW;
 input [4:0] DR, SR1, SR2;
 input [31:0] Reg_In;
 output reg [31:0] ReadReg1, ReadReg2;
 reg [31:0] REG [0:31];

 always @(posedge CLK) begin
 if(RegW == 1'b1)
 REG[DR] <= Reg_In[31:0];
 ReadReg1 <= REG[SR1];
 ReadReg2 <= REG[SR2];
 end
endmodule

module Memory(CS, WE, CLK, ADDR, Mem_Bus);
 input CS, WE, CLK;
 input [31:0] ADDR;
 inout [31:0] Mem_Bus;
 //reg [31:0] data_out;
 reg [31:0] RAM [0:15];
 
//change order
assign Mem_Bus = ((CS == 1'b0) || (WE == 1'b1)) ? 32'bZ : RAM[ADDR];
initial
begin
RAM[0] = 32'h30000000; // andi $0, $0, 0
RAM[1] = 32'h30630000; // andi $3, $3, 0
RAM[2] = 32'h20630004; // addi $3, $3, 4
RAM[3] = 32'h8C020008; // lw $2 8-11($0)
RAM[4] = 32'h0040081A; // brv $1, $2
RAM[5] = 32'hAC01000C; // sw $12-15, 1($0)
RAM[6] = 32'h20000001; // addi $0, $0, 1 
RAM[7] = 32'h1460FFFB; // bne $3, $0,-5
RAM[8] = 32'h11000000; 
RAM[9] = 32'h00110000; 
RAM[10] = 32'h00001100; 
RAM[11] = 32'h00000011;
RAM[12] = 32'h00000000;
RAM[13] = 32'h00000000;
RAM[14] = 32'h00000000;
RAM[15] = 32'h00000000;
end

 always @(negedge CLK) begin
 if((CS == 1'b1) && (WE == 1'b1))
 	RAM[ADDR] <= Mem_Bus[31:0];
end
endmodule

module binary_to_7seg(binary_in,seg7_out);
	input  [3:0] binary_in;
	output [6:0] seg7_out;
	reg    [6:0] seg7_out;
	always @ (binary_in)
	 begin
	  case(binary_in)
	  4'h0: seg7_out = 7'b1000000;
	  4'h1: seg7_out = 7'b1111001;
	  4'h2: seg7_out = 7'b0100100;
	  4'h3: seg7_out = 7'b0110000;
	  4'h4: seg7_out = 7'b0011001;
	  4'h5: seg7_out = 7'b0010010;
	  4'h6: seg7_out = 7'b0000010;
	  4'h7: seg7_out = 7'b1111000;
	  4'h8: seg7_out = 7'b0000000;
	  4'h9: seg7_out = 7'b0011000;
	  4'hA: seg7_out = 7'b0001000;
	  4'hB: seg7_out = 7'b0000011;
	  4'hC: seg7_out = 7'b1000110;
	  4'hD: seg7_out = 7'b0100001;
	  4'hE: seg7_out = 7'b0000110;
	  4'hF: seg7_out = 7'b0001110;
	  default: seg7_out = 7'b1111111;
	  endcase
	 end
endmodule

module lab02(CLK, RST,Seg);
 input CLK;
 input RST;
 output [55:0] Seg;
 wire CS, WE;
 wire [31:0] ADDR, Mem_Bus;



 MIPS CPU(CLK, RST, CS, WE, ADDR, Mem_Bus);
 Memory MEM(CS, WE, CLK, ADDR, Mem_Bus);

 binary_to_7seg  c1(Mem_Bus[3:0],Seg[6:0]);
 binary_to_7seg  c2(Mem_Bus[7:4],Seg[13:7]);
 binary_to_7seg  c3(Mem_Bus[11:8],Seg[20:14]);
 binary_to_7seg  c4(Mem_Bus[15:12],Seg[27:21]);
 binary_to_7seg  c5(Mem_Bus[19:16],Seg[34:28]);
 binary_to_7seg  c6(Mem_Bus[23:20],Seg[41:35]);
 binary_to_7seg  c7(Mem_Bus[27:24],Seg[48:42]);
 binary_to_7seg  c8(Mem_Bus[31:28],Seg[55:49]);

endmodule